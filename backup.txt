const express = require('express');
const axios = require('axios');
const cheerio = require('cheerio');
const bodyParser = require('body-parser');
const { URL, URLSearchParams } = require('url');

const app = express();
app.use(bodyParser.json());

// Serve the HTML, CSS, and JS files
app.get('/', (req, res) => {
    res.send(`
        <!DOCTYPE html>
        <html lang="en">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>TrackWithBuddy</title>
            <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
            <style>
                body {
                    font-family: "Courier New", Courier, monospace;
                    margin: 0;
                    padding: 20px;
                    background-color: #f4f4f4;
                    color: #333;
                }
                body.dark {
                    background-color: #333;
                    color: #fff;
                }
                h1 {
                    color: #333;
                }
                div {
                    margin: 10px 0;
                }
                input[type="url"], button, input[type="date"] {
                    padding: 10px;
                    margin-top: 5px;
                    font-size: 16px;
                }
                button {
                    cursor: pointer;
                    background-color: #4CAF50;
                    color: white;
                    border: none;
                }
                button:hover {
                    background-color: #45a049;
                }
                .dark button {
                    background-color: #555;
                }
                .dark button:hover {
                    background-color: #444;
                }
                #calendar {
                    display: none;
                }
                .editor {
                    background-color: #2d2d2d;
                    color: #f8f8f2;
                    padding: 15px;
                    border-radius: 5px;
                    font-size: 14px;
                    overflow-x: auto;
                    white-space: pre-wrap;
                    line-height: 1.5;
                }
                .keyword {
                    color: #f92672;
                }
                .string {
                    color: #a6e22e;
                }
                .variable {
                    color: #66d9ef;
                }
                .dark .editor {
                    background-color: #272822;
                    color: #f8f8f2;
                }
                .line-numbers {
                    color: lightblue;
                    font-size: 14px;
                    margin-right: 10px;
                    display: inline-block;
                    width: 30px;
                }
                .dark .line-numbers {
                    color: #999;
                }
                .editor-content {
                    display: inline-block;
                }
                .editor-content span {
                    display: block;
                }
                .editor-content .keyword {
                    color: red;
                }
                .editor-content .variable {
                    color: blue;
                }
                .editor-content .string {
                    color: green;
                }
            </style>
        </head>
        <body>
            <h1>TrackWithBuddy - Skillrack Profile</h1>
            <div style="display: flex; justify-content: space-between;">
                <button id="darkModeToggle"><i class="fas fa-sun"></i> Dark Mode</button>
                <button id="loginBtn">Login</button>
            </div>
            
            <div>
                <label for="profileUrl">Enter Skillrack Profile URL:</label>
                <input type="url" id="profileUrl" placeholder="https://www.skillrack.com/profile/...">
                <button id="fetchProfile">Fetch Profile</button>
            </div>

            <div id="profileData" style="display: none;">
                <h3>Profile Data:</h3>
                <pre id="scheduleOutput" class="editor"></pre>
            </div>

            <div>
                <button id="scheduleAiBtn" style="display:none;">Schedule AI</button>
            </div>
            
            <div id="calendar">
                <label for="scheduleDate">Select Date:</label>
                <input type="date" id="scheduleDate">
                <button id="submitDate">Submit</button>
            </div>

            <script>
                document.addEventListener("DOMContentLoaded", () => {
                    // Load saved URL from localStorage if it exists
                    const savedUrl = localStorage.getItem("skillrackUrl");
                    if (savedUrl) {
                        document.getElementById("profileUrl").value = savedUrl;
                        fetchProfileData(savedUrl); // Fetch profile data on page load if URL exists
                        document.getElementById("loginBtn").textContent = "Logout";
                    }

                    // Event listener for dark/light mode toggle
                    document.getElementById("darkModeToggle").addEventListener("click", () => {
                        document.body.classList.toggle("dark");
                        const isDarkMode = document.body.classList.contains("dark");
                        document.getElementById("darkModeToggle").innerHTML = isDarkMode ? '<i class="fas fa-moon"></i> Light Mode' : '<i class="fas fa-sun"></i> Dark Mode';
                        updateCodeEditorTheme(isDarkMode);
                    });

                    // Event listener for the fetch profile button
                    document.getElementById("fetchProfile").addEventListener("click", async () => {
                        const profileUrl = document.getElementById("profileUrl").value;
                        if (profileUrl) {
                            // Save the URL to localStorage
                            localStorage.setItem("skillrackUrl", profileUrl);
                            document.getElementById("loginBtn").textContent = "Logout";
                            await fetchProfileData(profileUrl);
                        } else {
                            alert("Please enter a valid URL.");
                        }
                    });

                    // Event listener for the login/logout button
                    document.getElementById("loginBtn").addEventListener("click", () => {
                        const currentText = document.getElementById("loginBtn").textContent;
                        if (currentText === "Logout") {
                            localStorage.removeItem("skillrackUrl");
                            document.getElementById("profileUrl").value = '';
                            document.getElementById("profileData").style.display = "none";
                            document.getElementById("loginBtn").textContent = "Login";
                            alert("You have logged out.");
                        }
                    });

                    // Event listener for the schedule AI button
                    document.getElementById("scheduleAiBtn").addEventListener("click", () => {
                        document.getElementById("calendar").style.display = "block";
                    });

                    // Event listener for the submit button in the calendar
                    document.getElementById("submitDate").addEventListener("click", async () => {
                        const selectedDate = document.getElementById("scheduleDate").value;
                        if (selectedDate) {
                            const profileUrl = localStorage.getItem("skillrackUrl");
                            const response = await fetch("/api/trackwithbuddy", {
                                method: "POST",
                                headers: { "Content-Type": "application/json" },
                                body: JSON.stringify({ url: profileUrl, date: selectedDate })
                            });
                            const scheduleData = await response.json();
                            displaySchedule(scheduleData);
                        } else {
                            alert("Please select a date.");
                        }
                    });
                });

                // Function to fetch profile data and display the schedule
                async function fetchProfileData(url) {
                    try {
                        const response = await fetch("/api/points", {
                            method: "POST",
                            headers: { "Content-Type": "application/json" },
                            body: JSON.stringify({ url })
                        });

                        if (!response.ok) {
                            throw new Error("Failed to fetch profile data.");
                        }

                        const profileData = await response.json();
                        displayProfile(profileData);
                    } catch (error) {
                        console.error(error);
                        alert("An error occurred while fetching profile data.");
                    }
                }

                // Function to display the profile data
                function displayProfile(data) {
                    const profileData = document.getElementById("profileData");
                    const scheduleOutput = document.getElementById("scheduleOutput");
                    profileData.style.display = "block";
                    scheduleOutput.textContent = JSON.stringify(data, null, 2);
                    document.getElementById("scheduleAiBtn").style.display = "inline-block";
                    updateCodeEditorTheme(document.body.classList.contains("dark"));
                }

                // Function to apply a code editor-like theme for syntax highlighting
                function updateCodeEditorTheme(isDarkMode) {
                    const scheduleOutput = document.getElementById("scheduleOutput");
                    scheduleOutput.innerHTML = scheduleOutput.innerText
                        .replace(/"(.*?)"/g, '<span class="string">"$1"</span>') // Strings
                        .replace(/\b(true|false)\b/g, '<span class="keyword">$1</span>') // Booleans
                        .replace(/\b([a-zA-Z_][a-zA-Z0-9_]*)\b/g, '<span class="variable">$1</span>'); // Variables
                }

                function displaySchedule(data) {
                    console.log(data);
                        const table = document.createElement("table");
                        table.style.width = "100%";
                        table.style.border = "1px solid #ddd";
                        table.style.borderCollapse = "collapse";
                        const Sdata = data.schedule;
                        table.innerHTML = \`
                            <thead>     
                                <tr>
                                    <th>Date</th>
                                    <th>Tracks</th>
                                    <th>DT</th>
                                    <th>DC</th>
                                    <th>Points</th>
                                </tr>
                            </thead>
                            <tbody>
                                \${Sdata.map(item => {
                                    return \`
                                        <tr>
                                            <td style="padding: 8px; border: 1px solid #ddd;">\${item.date}</td>
                                            <td style="padding: 8px; border: 1px solid #ddd;">\${item.tracks}</td>
                                            <td style="padding: 8px; border: 1px solid #ddd;">\${item.dt}</td>
                                            <td style="padding: 8px; border: 1px solid #ddd;">\${item.dc}</td>
                                            <td style="padding: 8px; border: 1px solid #ddd;">\${item.points}</td>
                                        </tr>
                                    \`;
                                }).join("")}
                            </tbody>
                        \`;

                        document.getElementById("profileData").appendChild(table);
                    }
            </script>
        </body>
        </html>
    `);
});



// Helper function to scrape Skillrack profile
async function scrapeSkillrackProfile(url) {
    const profileData = {
        id: '',
        name: '',
        dept: '',
        year: '',
        college: '',
        code_tutor: 0,
        code_track: 0,
        code_test: 0,
        dt: 0,
        dc: 0,
        points: 0,
        required_points: 5000,
        deadline: '30-04-2024',
        percentage: 100,
        last_fetched: new Date().toISOString().replace('T', ' ').slice(0, 19),
        url: url
    };

    try {
        // Fetch page content
        const response = await axios.get(url);
        const $ = cheerio.load(response.data);

        // Extract profile ID from URL
        const parsedUrl = new URL(url);
        profileData.id = new URLSearchParams(parsedUrl.search).get('id') || url.split('/')[4];

        // Extract name and remove any newline characters
        const nameDiv = $('div.ui.big.label.black');
        if (nameDiv.length) {
            profileData.name = nameDiv.text().trim().replace(/\n/g, " ").replace(/\s+/g, ' ').replace('PROGRAMMING SUMMARY','').replace(/\b([1-9]|[1-9][0-9]|100)\b/g, '').replace('CERTIFICATE(S)','').trim();
        }

        // Extract department, year, and college
        const profileDiv = $('div.ui.four.wide.center.aligned.column');
        if (profileDiv.length) {
            const rawText = profileDiv.text().trim().split('\n');
            if (rawText.length > 8) {
                profileData.dept = rawText[4].trim();
                profileData.college = rawText[6].trim();
                profileData.year = rawText[8].trim().slice(-4);
            }
        }

        // Extract statistics
        const statisticsDiv = $('div.statistic');
        const labelsToExtract = {
            'CODE TUTOR': 'code_tutor',
            'CODE TEST': 'code_test',
            'CODE TRACK': 'code_track',
            'DC': 'dc',
            'DT': 'dt',
            'Points': 'points',
            'Required Points': 'required_points',
            'Deadline': 'deadline',
            'Percentage': 'percentage'
        };

        statisticsDiv.each((_, stat) => {
            const label = $(stat).find('div.label').text().trim();
            const value = $(stat).find('div.value').text().trim();

            if (label && labelsToExtract[label]) {
                if (label === 'Percentage') {
                    profileData.percentage = parseInt(value.replace('%', '')) || 100;
                } else if (label === 'Deadline') {
                    profileData.deadline = '30-04-2024';
                } else {
                    profileData[labelsToExtract[label]] = parseInt(value) || value;
                }
            }
        });

        // Calculate points and percentage completed
        profileData.points =
            profileData.code_test * 30 +
            profileData.dc * 2 +
            profileData.dt * 20 +
            profileData.code_track * 2;

        profileData.percentage_completed =
            (profileData.points / profileData.required_points) * 100+"%";

        // Return the cleaned-up profile data
        return profileData;

    } catch (error) {
        throw new Error('Failed to fetch or parse the profile data.');
    }
}


// Endpoint: /api/trackwithbuddy
app.post('/api/trackwithbuddy', async (req, res) => {
    const { url, date } = req.body; // Only url and date are expected in the request body

    if (!url || !date) {
        return res.status(400).json({ error: 'URL and date are required' });
    }

    try {
        // Fetch profile data based on the provided URL (Assuming there's a function `fetchProfileData` to fetch this)
        const profileData = await scrapeSkillrackProfile(url); 
        console.log(profileData);
        // Ensure profile data is available
        if (!profileData) {
            return res.status(400).json({ error: 'Profile data not found or invalid format' });
        }

        // Use profileData directly
        const { code_track, dt, dc, points, code_test, required_points, deadline } = profileData;

        const today = new Date();
        const finishDate = new Date(date);

        // Calculate the number of days left until the finish date
        const daysToFinish = Math.ceil((finishDate - today) / (24 * 60 * 60 * 1000));
        if (daysToFinish <= 0) {
            return res.status(400).json({ error: 'Finish date must be in the future!' });
        }

        const target = required_points; // Directly using required_points from profileData
        const dailyPoints = (target - points) / daysToFinish;
        let trackInc = Math.ceil(dailyPoints / 2);

        let scheduleList = [];
        for (let i = 0; i < daysToFinish; i++) {
            today.setDate(today.getDate() + 1);
            const updatedDt = dt + i;
            const updatedDc = dc + i;
            const updatedCodeTrack = code_track + trackInc * i;
            const updatedPoints = Math.floor(updatedCodeTrack) * 2 + Math.floor(updatedDt) * 20 + Math.floor(updatedDc) * 2 + Math.floor(code_test) * 30;

            scheduleList.push({
                date: today.toLocaleDateString(),
                tracks: Math.floor(updatedCodeTrack),
                dt: updatedDt,
                dc: updatedDc,
                points: Math.floor(updatedPoints),
            });

            if (updatedPoints >= target) break;
        }

        const trackIncrement = trackInc;

        res.json({
            schedule: scheduleList,
            trackIncrement,
            status: 'Success'
        });
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
});

// Endpoint: /api/points
app.post('/api/points', async (req, res) => {
    const { url } = req.body;

    if (!url) {
        return res.status(400).json({ error: 'No URL provided in the request body' });
    }

    try {
        const decodedUrl = decodeURIComponent(url);
        if (!decodedUrl.startsWith('http')) {
            return res.status(400).json({ error: 'Invalid URL provided' });
        }

        const profileData = await scrapeSkillrackProfile(decodedUrl);
        res.json(profileData);
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
});

// Start the server
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
    console.log(`Server is running on port ${PORT}`);
});
// curl -X POST http://127.0.0.1:3000/api/points -H "Content-Type: application/json" -d "{\"url\": \"http://www.skillrack.com/profile/466648/ca102ea9fcbf53b1a5fe134f6d13364e723aab47\"}"
